Updated specification:
The main features that we have added for Phase 1 are the GUI of the login page and the game board,
connecting that to the code that we had for Phase 0, implementing the loading and saving of the game
as well as implementing a class to determine who wins the game. We have also added an sql database
which is not integrated as yet but is intended to be used for PlayerStats.

Major design decisions:
We decided to implement the GUI and connect it to main later. In addition, we decided to fix
a lot of the design problems we had in Phase 0 such as changing GameBoardManager to
UseCases.GameBoardManipulator as well as adding classes such as UseCases.CheckMill to check when a mill was
made on the Entity.GameBoard and UseCases.WinnerCalculator for checking when a player had one. We implemented
these while keeping clean architecture in mind especially the single-responsibility principle
of the SOLID principles.

Packaging:
Our packaging unfortunately did not go as planned as the code was breaking when we decided to package
but our packaging was based on clean architecture. We created packages for each clean architecture layer
we used in our project, such as entity, use cases and gateways. We also added packages for exceptions and
interfaces used in our program.

SOLID principles and our project:

S(single-responsibility principle): each one of our classes (some of which are Entity.Player, Entity.Token, Entity.GameBoard,
GameBoardManager etc.) all are only responsible for handling one aspect of the code. For a more
specific example, we have implemented UseCases.GameBoardPlacer and UseCases.GameBoardRemover as different classes
responsible for placing tokens on the Entity.GameBoard and also removing them instead of Entity.GameBoard being
responsible for doing both those things.

O(open-closed principle): Our entity classes all have space to be extended but are more rigid
when it comes to being modified. Specifically, UseCases.GameBoardManipulator is open to adding more methods
if needed without needing to change the current methods that are implemented.

L (liskov substitution principle): Not a lot of our classes use inheritance and so this principle is not
applied to us. The classes of ours that do use inheritance are a lot of the errors that arise
from invalid moves and those are implemented by keeping the Liskov substitution principle in mind.

Interface segregation principle: Not a lot of interfaces were used in our code.

Dependency inversion principle: Our code generally follows this principle as more abstract
classes depend on less abstract classes. For example, Entity.Token does not depend on GamePlayManipulator
as Entity.Token is a less abstract class.

Summary of design patterns:

Facade: Used to fix UseCases.GameBoardManipulator (formerly GameBoardManager) to follow
the single responsibility principle of SOLID. UseCases.GameBoardManipulator was broken into smaller classes
that could perform its functionality so if anything needed to change, we changed those classes only and
nothing else.

Interfaces.Observer: Didn't have time to implement, but originally planned to implement using UseCases.GameBoardMap and UseCases.GameBoardManipulator,
so UseCases.GameBoardMap is updated with new positions occupied by tokens and new mills formed by players whenever UseCases.GameBoardManipulator
changes the Entity.GameBoard. Now, we plan to implement this in Phase 2.

Progress report:
Some of the open questions that we have revolve more around how to connect various part of the code in a coherent
way. As of right now, there are some factors of the code that could be replaced with specific classes so the code
can run smoother. Specifically right now, we spent most of our time trying to resolve how to connect the GUI that
has been created with main. We were able to do so. We are also trying to look for solutions as to how we can adjust
the old code we had to newer extensions we are adding in a way that adheres to clean architecture and is efficient.
In addition, we are now going to spend time working on removing tokens for the GUI's. For Phase 2, we hope to add
more features such as PlayerStats being displayed and removing tokens and sliding tokens on the GUI in addition to
having a winner page to show when a player has won and messages when players have made a mill and when
they lose a token etc. We also hope to implement the sliding in the game.

What has worked well so far with the design:
Implementing the extensions did not cause any serious errors that would hurt the skeleton of the game
from phase 0. In addition, the GUI and the remaining portions from the game that were to be implemented
in Phase 1 were done. All new classes and/or methods that were added were with the view to make the code
more efficient and clean, which has also been implemented on. Adding the GUI to main has also worked
well in terms of implementing the GUI in itself and then connecting it to main.

What each team member has worked on and plans to work on:

Aliza:
Worked on creating Check Mill, a class which checks whether a mill has been made in the game and Winner
Calculator which specifies who won the game. Also worked on the UML models. Will focus more on Phase 2
with testing the gameto find any bugs in addition to working on the stats of the players that could
be displayed in a GUI as well.

Aalina: Working on UseCases.GameBoardMap and trying to resolve issues with unifying the code to try and resolve
issues with UseCases.GameBoardMap and make it as efficient as possible. Also worked on progress reports and the
design document. Will continue to work on UseCases.GameBoardMap and also on features that can be added to the
GUI so it can be made more interactive.

Jason:
Worked on UseCases.GameBoardManipulator, a newer version of GameBoardManager. Created the Entity.Token class and worked
on PlayerDataGateway using a sql database. Also worked on the UML diagram with Aliza. Has worked on
and will continue to work on packaging and testing to make sure that the code is clean and does not
break when packaged in addition to checking that its functionality remains intact at all times
(with Aliza).

Mary:
Making changes in Controller.GamePlay1, which is the controller to follow clean architecture. For Phase 2,
Mary and Felipe are also going to work on finding a way to remove tokens on the GUI in addition
to focusing on more UI/UX principles.

Felipe:
Mainly worked on the GUI and has implemented the login page and the GUI for the game board. Also
worked on implementing the GUI to connect to main.

Saksham:
Worked on saving and loading the game. For Phase 2, will work more on making sure that all coding
principles are being followed and will work on clean architecture models in addition to developing
the GUIs for the game.

